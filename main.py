import requests
from bs4 import BeautifulSoup
import telebot
from dotenv import load_dotenv
import os
from collections import Counter
import json
import google.generativeai as genai
import logging
import asyncio

load_dotenv()

BOT_TOKEN = os.getenv("–¢–û–ö–ï–ù –ë–û–¢–ê")
if not BOT_TOKEN:
    BOT_TOKEN = '–¢–û–ö–ï–ù –ë–û–¢–ê'

bot = telebot.TeleBot(BOT_TOKEN)

GEMINI_API_KEY = os.getenv("–¢–£–¢ –ê–ü–ò")
if not GEMINI_API_KEY:
    GEMINI_API_KEY = '–¢–£–¢ –ê–ü–ò'

genai.configure(api_key=GEMINI_API_KEY)

generation_config = {
    "temperature": 0.9,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 8192,
}

model = genai.GenerativeModel(
    model_name="gemini-2.0-flash-exp",
    generation_config=generation_config
)

chat_sessions = {}

def load_html_from_file(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            html_content = f.read()
        return html_content
    except FileNotFoundError:
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def parse_html_cards_simplified(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    cards = soup.find_all('div', class_=lambda x: x and 'card card-outside computer-' in x)
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")

    card_data_list = []
    for card in cards:
        try:
            card_data = {}
            
            system_items = card.find_all('li', class_='card__system__item')
            for item in system_items:
                title = item.find('span', class_='card__system__title')
                value = item.find('span', class_='card__system__value')
                if title and value:
                    key = title.text.replace(':', '').strip()
                    val = value.text.strip()
                    if '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä' in key:
                        card_data['cpu'] = val
                    elif '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞' in key:
                        card_data['gpu'] = val
                    elif '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å' in key:
                        card_data['ram'] = val

            price_element = card.find('div', class_='card__price')
            if price_element:
                price_text = price_element.text.strip()
                price_digits = ''.join(c for c in price_text if c.isdigit())
                if price_digits:
                    card_data['price'] = f"{int(price_digits)} ‚ÇΩ"
                else:
                    card_data['price'] = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            else:
                alt_price = card.find('div', class_='price')
                if alt_price:
                    price_text = alt_price.text.strip()
                    price_digits = ''.join(c for c in price_text if c.isdigit())
                    if price_digits:
                        card_data['price'] = f"{int(price_digits)} ‚ÇΩ"
                    else:
                        card_data['price'] = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                else:
                    card_data['price'] = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            card_data_list.append(card_data)
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {card_data}")  
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            continue

    return card_data_list

def get_price_stats(card_data_list):
    try:
        prices = []
        for card in card_data_list:
            price_str = card['price'].replace('‚ÇΩ', '').replace(' ', '')
            if price_str.isdigit():
                prices.append(int(price_str))
        
        if not prices:
            return "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö</b>"
        
        avg_price = sum(prices) / len(prices)
        median_price = sorted(prices)[len(prices)//2]
        
        return (
            "üí∞ <b>–ê–ù–ê–õ–ò–ó –¶–ï–ù</b>\n"
            f"‚îî –í—Å–µ–≥–æ —Å —Ü–µ–Ω–∞–º–∏: <b>{len(prices)}</b> –∏–∑ {len(card_data_list)}\n"
            f"‚îî –°—Ä–µ–¥–Ω—è—è: <b>{int(avg_price):,} ‚ÇΩ</b>\n"
            f"‚îî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: <b>{min(prices):,} ‚ÇΩ</b>\n"
            f"‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: <b>{max(prices):,} ‚ÇΩ</b>\n"
            f"‚îî –ú–µ–¥–∏–∞–Ω–Ω–∞—è: <b>{median_price:,} ‚ÇΩ</b>"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_price_stats: {e}")
        return "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω</b>"

def get_cpu_stats(card_data_list):
    cpu_counts = Counter(card['cpu'] for card in card_data_list)
    total = len(card_data_list)
    
    output = "üîß <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–û–†–û–í</b>\n"
    for cpu, count in cpu_counts.most_common(5):
        percentage = (count / total) * 100
        output += f"‚îî {cpu}: {count} —à—Ç ({percentage:.1f}%)\n"
    return output

def get_gpu_stats(card_data_list):
    gpu_counts = Counter(card['gpu'] for card in card_data_list)
    total = len(card_data_list)
    
    output = "üéÆ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–î–ï–û–ö–ê–†–¢</b>\n"
    for gpu, count in gpu_counts.most_common(5):
        percentage = (count / total) * 100
        output += f"‚îî {gpu}: {count} —à—Ç ({percentage:.1f}%)\n"
    return output

def get_ram_stats(card_data_list):
    ram_counts = Counter(card['ram'] for card in card_data_list)
    total = len(card_data_list)
    
    output = "üíæ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ó–£</b>\n"
    for ram, count in ram_counts.most_common():
        percentage = (count / total) * 100
        output += f"‚îî {ram}: {count} —à—Ç ({percentage:.1f}%)\n"
    return output

def get_quick_overview(card_data_list):
    total = len(card_data_list)
    prices = [int(card['price'].replace('‚ÇΩ', '').replace(' ', '')) for card in card_data_list if card['price'].replace('‚ÇΩ', '').replace(' ', '').isdigit()]
    avg_price = sum(prices) / len(prices) if prices else 0
    
    return (
        "üìä <b>–ö–†–ê–¢–ö–ò–ô –û–ë–ó–û–†</b>\n"
        f"‚îî –í—Å–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: <b>{total}</b>\n"
        f"‚îî –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{int(avg_price):,} ‚ÇΩ</b>\n"
        f"‚îî –ú–æ–¥–µ–ª–µ–π CPU: <b>{len(set(card['cpu'] for card in card_data_list))}</b>\n"
        f"‚îî –ú–æ–¥–µ–ª–µ–π GPU: <b>{len(set(card['gpu'] for card in card_data_list))}</b>"
    )

def generate_statistics(card_data_list):
    stats = {
        'total_cards': len(card_data_list),
        'prices': [],
        'ram_sizes': [],
        'cpu_counts': Counter(),
        'gpu_counts': Counter()
    }

    for card in card_data_list:
        stats['cpu_counts'][card['cpu']] += 1
        stats['gpu_counts'][card['gpu']] += 1
        stats['ram_sizes'].append(card['ram'])
        
        try:
            price_str = card['price'].replace('‚ÇΩ', '').replace(' ', '')
            price = int(price_str) if price_str.isdigit() else 0
            if price > 0:
                stats['prices'].append(price)
        except:
            continue

    if stats['prices']:
        stats['avg_price'] = sum(stats['prices']) / len(stats['prices'])
        stats['min_price'] = min(stats['prices'])
        stats['max_price'] = max(stats['prices'])

    return stats

def format_stats_for_telegram(stats, card_data_list):
    top_cpu = stats['cpu_counts'].most_common(1)[0] if stats['cpu_counts'] else ('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 0)
    top_gpu = stats['gpu_counts'].most_common(1)[0] if stats['gpu_counts'] else ('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', 0)

    output = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–û–ú–ü–¨–Æ–¢–ï–†–ê–ú</b>\n\n"
    
    output += f"üì¶ –í—Å–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: <b>{stats['total_cards']}</b>\n\n"
    
    output += "üî• <b>–ü–û–ü–£–õ–Ø–†–ù–û–ï –ñ–ï–õ–ï–ó–û</b>\n"
    output += f"‚îî CPU: <b>{top_cpu[0]}</b> ({top_cpu[1]} —à—Ç)\n"
    output += f"‚îî GPU: <b>{top_gpu[0]}</b> ({top_gpu[1]} —à—Ç)\n\n"

    if 'avg_price' in stats:
        output += "üí∞ <b>–¶–ï–ù–´</b>\n"
        output += f"‚îî –°—Ä–µ–¥–Ω—è—è: <b>{int(stats['avg_price']):,} ‚ÇΩ</b>\n"
        output += f"‚îî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: <b>{stats['min_price']:,} ‚ÇΩ</b>\n"
        output += f"‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: <b>{stats['max_price']:,} ‚ÇΩ</–±>\n\n"

    output += "üîã <b>–¢–û–ü-3 –ü–†–û–¶–ï–°–°–û–†–û–í</b>\–Ω"
    for cpu, count in stats['cpu_counts'].most_common(3):
        percentage = (count / stats['total_cards']) * 100
        output += f"‚îî {cpu}: <b>{count}</b> —à—Ç ({percentage:.1f}%)\n"
    
    output += "\nüì∫ <b>–¢–û–ü-3 –í–ò–î–ï–û–ö–ê–†–¢</–±>\–Ω"
    for gpu, count in stats['gpu_counts'].most_common(3):
        percentage = (count / stats['total_cards']) * 100
        output += f"‚îî {gpu}: <b>{count}</b> —à—Ç ({percentage:.1f}%)\–Ω"

    return output

def search_by_component(card_data_list, component_type, query):
    results = []
    query = query.lower()
    
    for card in card_data_list:
        if component_type in card and query in card[component_type].lower():
            results.append(card)
    
    return results

def format_config_results(results):
    if not results:
        return "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    output = f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(results)}\n\n"
    for i, config in enumerate(results, 1):
        output += (f"üìå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è #{i}\n"
                  f"‚îî CPU: {config['cpu']}\n"
                  f"‚îî GPU: {config['gpu']}\n"
                  f"‚îî RAM: {config['ram']}\n"
                  f"‚îî –¶–µ–Ω–∞: {config['price']}\n\n")
        
        if len(output) > 3000:
            output += "... –∏ –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
            break
            
    return output

def search_by_full_config(card_data_list, query):
    results = []
    query_parts = query.lower().split()
    
    for card in card_data_list:
        card_text = (f"{card['cpu']} {card['gpu']} {card['ram']}").lower()
        matches = sum(1 for part in query_parts if part in card_text)
        if matches >= len(query_parts) / 2:
            score = matches / len(query_parts)
            results.append((score, card))
    
    return [card for score, card in sorted(results, key=lambda x: x[0], reverse=True)]

def generate_card_key(card):
    cpu = card.get('cpu', '').lower().strip()
    gpu = card.get('gpu', '').lower().strip()
    ram = card.get('ram', '').lower().strip()
    cpu = ' '.join(cpu.split())
    gpu = ' '.join(gpu.split())
    ram = ' '.join(ram.split())
    return f"{cpu}|{gpu}|{ram}"

def load_cards_data():
    json_file = 'cards_data.json'
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            existing_data = json.load(f)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(existing_data)} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ JSON")
    except FileNotFoundError:
        existing_data = []
        print("JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
    
    html_content = load_html_from_file('cards.txt')
    if not html_content:
        print("HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
        return existing_data
        
    new_cards = parse_html_cards_simplified(html_content)
    if not new_cards:
        print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return existing_data

    existing_configs = {generate_card_key(card) for card in existing_data}
    
    added_count = 0
    duplicate_count = 0
    
    for card in new_cards:
        card_key = generate_card_key(card)
        if card_key not in existing_configs:
            existing_data.append(card)
            existing_configs.add(card_key)
            added_count += 1
        else:
            duplicate_count += 1
    
    if added_count > 0:
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
    
    print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {duplicate_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    return existing_data

async def analyze_with_ai(card_data_list):
    try:
        data_summary = {
            'total_computers': len(card_data_list),
            'price_range': [],
            'components': {
                'cpu': [],
                'gpu': [],
                'ram': []
            }
        }

        for card in card_data_list:
            if card['price'].replace('‚ÇΩ', '').replace(' ', '').isdigit():
                data_summary['price_range'].append(int(card['price'].replace('‚ÇΩ', '').replace(' ', '')))
            data_summary['components']['cpu'].append(card['cpu'])
            data_summary['components']['gpu'].append(card['gpu'])
            data_summary['components']['ram'].append(card['ram'])

        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ {len(card_data_list)} –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö:
        
        –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {min(data_summary['price_range']):,}‚ÇΩ –¥–æ {max(data_summary['price_range']):,}‚ÇΩ
        
        –¢–æ–ø CPU: {', '.join(list(set(data_summary['components']['cpu']))[:5])}
        –¢–æ–ø GPU: {', '.join(list(set(data_summary['components']['gpu']))[:5])}
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
        1. –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ü–µ–Ω–∞/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º
        3. –¢—Ä–µ–Ω–¥—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        """

        chat = model.start_chat(history=[])
        response = chat.send_message(prompt)
        
        return response.text if response and response.text else "AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    except Exception as e:
        logging.error(f"Error in AI analysis: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞"

def split_long_message(text, max_length=4096):
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while len(text) > 0:
        if len(text) <= max_length:
            parts.append(text)
            break
        
        split_point = text[:max_length].rfind('.')
        if split_point == -1:
            split_point = text[:max_length].rfind('\n')
        if split_point == -1:
            split_point = max_length
        
        parts.append(text[:split_point + 1])
        text = text[split_point + 1:].lstrip()
    
    return parts

async def ask_ai_custom_question(data_summary, question):
    try:
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:
        
        –î–∞–Ω–Ω—ã–µ:
        - –í—Å–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {data_summary['total_computers']}
        - –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç {min(data_summary['price_range']):,}‚ÇΩ –¥–æ {max(data_summary['price_range']):,}‚ÇΩ
        - CPU: {', '.join(list(set(data_summary['components']['cpu']))[:5])}
        - GPU: {', '.join(list(set(data_summary['components']['gpu']))[:5])}
        
        –í–æ–ø—Ä–æ—Å: {question}
        """

        chat = model.start_chat(history=[])
        response = chat.send_message(prompt)
        return response.text if response and response.text else "AI –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"

    except Exception as e:
        logging.error(f"Error in custom AI question: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞"

def process_ai_question(message, data_summary):
    try:
        question = message.text.strip()
        if len(question) < 5:
            bot.reply_to(message, "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.")
            return

        processing_msg = bot.reply_to(message, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        response = loop.run_until_complete(ask_ai_custom_question(data_summary, question))
        loop.close()

        response_parts = split_long_message(response)
        
        bot.delete_message(message.chat.id, processing_msg.message_id)

        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(telebot.types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
        
        for i, part in enumerate(response_parts):
            if i == len(response_parts) - 1:
                bot.send_message(message.chat.id, part, parse_mode='HTML', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, part, parse_mode='HTML')

    except Exception as e:
        logging.error(f"Error processing AI question: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = create_main_menu_markup()
    welcome_text = (
        "ü§ñ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø–æ–∏—Å–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "- –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º\n"
        "- –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
    )
    bot.send_message(message.chat.id, welcome_text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data == "back_to_menu":
            markup = create_main_menu_markup()
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode='HTML',
                reply_markup=markup
            )
            bot.answer_callback_query(call.id)
            return

        card_data_list = load_cards_data()
        if not card_data_list:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        if call.data == "search_full":
            msg = bot.send_message(
                call.message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, –ø–∞–º—è—Ç—å):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: i5-12400F RTX 4060 16GB",
                reply_markup=telebot.types.ForceReply()
            )
            bot.register_next_step_handler(msg, lambda m: process_full_search(m, card_data_list))
            return

        if call.data in ["search_cpu", "search_gpu", "search_ram"]:
            component_type = call.data.split('_')[1]
            msg = bot.send_message(
                call.message.chat.id,
                f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è {component_type.upper()}:",
                reply_markup=telebot.types.ForceReply()
            )
            bot.register_next_step_handler(msg, lambda m: process_search(m, component_type, card_data_list))
            return
        
        if call.data == "all_configs":
            text = format_config_results(card_data_list)
        elif call.data == "ai_analysis":
            handle_ai_analysis(call)
            return
        elif call.data == "ask_ai":
            handle_ask_ai(call)
            return
        else:
            if call.data == "overview":
                text = get_quick_overview(card_data_list)
            elif call.data == "prices":
                text = get_price_stats(card_data_list)
            elif call.data == "cpu":
                text = get_cpu_stats(card_data_list)
            elif call.data == "gpu":
                text = get_gpu_stats(card_data_list)
            elif call.data == "ram":
                text = get_ram_stats(card_data_list)
        
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode='HTML',
                reply_markup=call.message.reply_markup
            )
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        print(f"Error in callback_query: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def process_search(message, component_type, card_data_list):
    query = message.text.strip()
    if len(query) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    results = search_by_component(card_data_list, component_type, query)
    response = format_config_results(results)
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(telebot.types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    bot.reply_to(message, response, parse_mode='HTML', reply_markup=markup)

def process_full_search(message, card_data_list):
    query = message.text.strip()
    if len(query) < 3:
        bot.reply_to(message, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return
    
    results = search_by_full_config(card_data_list, query)
    response = format_config_results(results)
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(telebot.types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))
    
    bot.reply_to(message, response, parse_mode='HTML', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    send_welcome(message)

def get_stats(message):
    card_data_list = load_cards_data()
    if card_data_list:
        stats = generate_statistics(card_data_list)
        formatted_text = format_stats_for_telegram(stats, card_data_list)
        if formatted_text:
            bot.send_message(message.chat.id, formatted_text, parse_mode='HTML', disable_web_page_preview=True)
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

def create_main_menu_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    
    markup.row(
        telebot.types.InlineKeyboardButton("üìä –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä", callback_data="overview"),
        telebot.types.InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data="prices")
    )
    
    markup.row(
        telebot.types.InlineKeyboardButton("üîß –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã", callback_data="cpu"),
        telebot.types.InlineKeyboardButton("üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", callback_data="gpu")
    )
    
    markup.row(
        telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ CPU", callback_data="search_cpu"),
        telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ GPU", callback_data="search_gpu")
    )
    
    markup.row(
        telebot.types.InlineKeyboardButton("üíæ –ü–∞–º—è—Ç—å", callback_data="ram"),
        telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ RAM", callback_data="search_ram")
    )
    
    markup.row(
        telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="search_full")
    )
    
    markup.row(
        telebot.types.InlineKeyboardButton("üñ•Ô∏è –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="all_configs")
    )
    
    markup.row(
        telebot.types.InlineKeyboardButton("ü§ñ AI –ê–Ω–∞–ª–∏–∑", callback_data="ai_analysis")
    )
    
    markup.row(
        telebot.types.InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI", callback_data="ask_ai")
    )
    
    return markup

@bot.callback_query_handler(func=lambda call: call.data == "ai_analysis")
def handle_ai_analysis(call):
    try:
        card_data_list = load_cards_data()
        if not card_data_list:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="ü§ñ –í—ã–ø–æ–ª–Ω—è—é AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...",
            parse_mode='HTML'
        )

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        ai_response = loop.run_until_complete(analyze_with_ai(card_data_list))
        loop.close()

        response_parts = split_long_message(ai_response)
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(telebot.types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu"))

        for i, part in enumerate(response_parts):
            if i == 0:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"ü§ñ <b>AI –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</b>\n\n{part}",
                    parse_mode='HTML',
                    reply_markup=markup if len(response_parts) == 1 else None
                )
            else:
                bot.send_message(
                    chat_id=call.message.chat.id,
                    text=part,
                    parse_mode='HTML',
                    reply_markup=markup if i == len(response_parts)-1 else None
                )

    except Exception as e:
        logging.error(f"Error in AI analysis handler: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞")

@bot.callback_query_handler(func=lambda call: call.data == "ask_ai")
def handle_ask_ai(call):
    try:
        card_data_list = load_cards_data()
        if not card_data_list:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        data_summary = {
            'total_computers': len(card_data_list),
            'price_range': [],
            'components': {'cpu': [], 'gpu': [], 'ram': []}
        }
        
        for card in card_data_list:
            if card['price'].replace('‚ÇΩ', '').replace(' ', '').isdigit():
                data_summary['price_range'].append(int(card['price'].replace('‚ÇΩ', '').replace(' ', '')))
            data_summary['components']['cpu'].append(card['cpu'])
            data_summary['components']['gpu'].append(card['gpu'])
            data_summary['components']['ram'].append(card['ram'])

        msg = bot.send_message(
            call.message.chat.id,
            "ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –ö–∞–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∏–≥—Ä?\n"
            "- –í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞–º–∏?\n"
            "- –ö–∞–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ?",
            reply_markup=telebot.types.ForceReply()
        )
        
        bot.register_next_step_handler(msg, lambda m: process_ai_question(m, data_summary))
        
    except Exception as e:
        logging.error(f"Error in ask_ai handler: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    initial_data = load_cards_data()
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(initial_data)} –∫–∞—Ä—Ç–æ—á–µ–∫")
    print(f"Gemini AI –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω: {'—É—Å–ø–µ—à–Ω–æ' if GEMINI_API_KEY else '–æ—à–∏–±–∫–∞'}")
    bot.polling(none_stop=True)